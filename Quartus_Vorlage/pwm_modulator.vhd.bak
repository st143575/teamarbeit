library ieee;
use ieee.std_logic_1164.all;

entity pwm_modulator is
	port (
		clock: in std_ulogic;
		Taster_1: in std_ulogic;
		Taster_2: in std_ulogic;
		Taster_3: in std_ulogic;
		steuer_port: out std_ulogic := 0;
		LED_0: out std_ulogic := '0';
		LED_1: out std_ulogic := '0';
		LED_2: out std_ulogic := '0';
		LED_3: out std_ulogic := '0';
		LED_4: out std_ulogic := '0';
		LED_5: out std_ulogic := '0'
	);
end entity pwm_modulator;

architecture arch_pwm_modulator of pwm_modulator is
begin
	process (clock) is
		variable mode: integer range 0 to 3 := 0;
		variable divider: integer range 0 to 3 := 0;
		variable start: integer range 0 to 1 := 0;
	begin
		if Taster_1 and (start = 0) then
			start <= 1;
		else if Taster_1 and (start = 1) then
			start <= 0;
		end if;

		if Taster_2 and (3 > mode) then
			mode := mode + 1;
		else LED_5 <= '1';
		end if;

		if Taster_3 and (mode > 0) then
			mode := mode - 1;
		else LED_5 <= '1';
		end if;

		if rising_edge(clock) and (start = 1) then
			LED_0 <= '1';
			case modulation is 
				when mode = 0 =>
					LED_1 <= '1';
					if divider = 4 then
						steuer_port <= '1';
						divider <= '0';
					else 
						divider <= diver + 1;
						steuer_port <= '0';
					end if;
				when mode = 1 =>
					LED_2 <= '1';
					if divider = 3 then
						steuer_port <= '1';
						divider <= '0';
					else 
						divider <= diver + 1;
						steuer_port <= '0';
					end if;
				when mode = 2 =>
					LED_3 <= '1';
					if divider = 2 then
						steuer_port <= '1';
						divider <= '0';
					else 
						divider <= diver + 1;
						steuer_port <= '0';
					end if;
				when mode = 3 =>
					LED_4 <= '1';
					steuer_port <= '1';
			end case;
		else steuer_port <= '0';
		end if;
	end process;
end architecture arch_pwm_modulator;